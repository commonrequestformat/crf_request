<?php
/**
 * @file
 * Code for the CRF Request feature.
 */

include_once 'crf_request.features.inc';


/**
 * Implements hook_node_presave().
 */
function crf_request_node_presave($node) {
  if ($node->type == 'request') {
/*
    $reporting_types = array();
    foreach ($node->field_reporting_type['und'] as $reporting_type) {
      $reporting_type_term = taxonomy_term_load($reporting_type['target_id']);
      $reporting_types[] = $reporting_type_term->name;
    }
    $node->title = t('@reporting_types @title', array('@reporting_types' => implode(', ', $reporting_types), '@title' => $node->title));
*/
  }
}

/**
 * Implements hook_block_info().
 */
function crf_request_block_info() {
  $blocks['create_request'] = array(
    'info' => t('Create Request (CRF)'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function crf_request_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'create_request':
      $block['subject'] = t('Create Request');
      $block['content'] = _crf_request_create_request();
      break;
  }

  return $block;
}

/**
 * Create request block
 */
function _crf_request_create_request() {
  $link_create = l('Create request', 'node/add/request', array('attributes' => array('class' => array('button', 'create-request'))));
  return $link_create;
}

/**
 * Implements hook_form_alter().
 * Check for field_collection_request_ref field.
 * If it is there then the node is a "CRF report".
 */
function crf_request_form_alter(&$form, &$form_state, $form_id) {

  // check if is CRF report node edit form
  if (isset($form['field_collection_request_ref'])) {

    $form['#pre_render'][] = 'crf_request_form_report_pre_render';
    unset($form['revision_information']['#group']);
  // Get all the states *this* user can access. If states is false, this user
  // can not change the moderation state
  $moderation_state = $form['#node']->workbench_moderation['current']->state;
  $states_all = workbench_moderation_states();
  if ($states = workbench_moderation_states_next($moderation_state, $user, $form['#node'])) {
    foreach($states as $state => $state_label) {
      if ($state <> $moderation_state) {
        $form['actions']['moderate_' . $state] = array(
          '#type'  => 'submit',
          '#value' => t('Save & @state', array('@state' => $states_all[$state]->description)),
          '#cfr_status_new' => $state,
          '#executes_submit_callback' => TRUE,
        );
        $form['actions']['moderate_' . $state]['#submit'] = $form['actions']['submit']['#submit'];
        array_unshift($form['actions']['moderate_' . $state]['#submit'], 'cfr_request_node_form_submit');
      }
    }
  }
//dpm(array('form' => $form, 'form_state' => $form_state), "crf_request_form_alter > $form_id");

  }
}

/**
 * Pre-render callback to cleanup node form for CRF report.
 */
function crf_request_form_report_pre_render($form) {

  // Get rendered node
  $node = $form['#node'];
  $node_view = node_view($node);

  // hide elements
  hide($form['title']);
  hide($form['field_collection_request_ref']);
  $form['field_collection_request_ref_view'] = $node_view['eva_field_collection_request_entity_view_1'];
  $form['field_collection_request_ref_view']['#weight'] = $form['field_collection_request_ref']['#weight'];
  hide($form['field_recipient']);
  $form['field_recipient_view'] = $node_view['field_recipient'];
  $form['field_recipient_view']['#weight'] = $form['field_recipient']['#weight'];
//  hide($form['comment_settings']);
//  hide($form['path']);

  // set moderation workflow
  $moderation_state = $form['#node']->workbench_moderation['current']->state;
  $moderation_label = workbench_moderation_state_label($moderation_state);
  $form['revision_information']['#title'] .= ' - ' . t('Current state: @state', array('@state' => $moderation_label));
  hide($form['revision_information']['workbench_moderation_state_new']);
  $form['revision_information']['log_view'] = $node_view['eva_report_workflow_entity_view_1'];
  $form['revision_information']['log_view']['#weight'] = $form['revision_information']['log']['#weight'] + 1;

//  array_unshift($form['actions']['submit']['#submit'], 'cfr_request_node_form_submit');
//  array_pop($form['actions']['submit']['#submit']);

//dpm($node_view, 'crf_request_form_report_pre_render > $node_view');
dpm($form, 'crf_request_form_report_pre_render > form');
dpm($form['revision_information'], 'crf_request_form_report_pre_render > form["revision_information"]');
  return $form;
}

/**
 * CFR Report node form submit callback.
 */
function cfr_request_node_form_submit($form, &$form_state) {
  if (isset($form_state['clicked_button']['#crf_status_new'])) {
    $form_state['values']['workbench_moderation_state_new'] = $form_state['clicked_button']['#crf_status_new'];
  }
dpm($form_state, 'cfr_request_node_form_submit > $form_state');
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function crf_request_form_request_node_form_alter(&$form, &$form_state, $form_id) {
  $node = $form['#node'];
  if (!isset($node->nid)) {
    $form['actions']['submit']['#value'] = t('Create & Send Info Request');
/*
    // Help link
    $help_link = theme('advanced_help_topic', array(
      'module' => 'crf_request',
      'topic' => 'request-email',
    ));
    $form['field_append_to_alert_email']['#prefix'] = $help_link . '&nbsp;' . t('Show me an Information Request email example');
*/
    if (isset($form['field_collection_request'])) {

      // check form step (mail preview is actually a step)
      $preview = isset($form_state['storage']['crf_request_preview']) ? $form_state['storage']['crf_request_preview'] : FALSE;
      $max_delta = $form['field_collection_request']['und']['#max_delta'];

      if (!$preview) {
        // Add preview button
        $form['field_collection_request']['preview'] = array(
          '#name' => 'crf_request_preview_button',
          '#type' => 'submit',
          '#value' => t('Preview requests'),
          '#validate' => array('crf_request_field_collection_request_preview_validate'),
          '#submit' => array('crf_request_field_collection_request_preview_submit'),
          '#weight' => 1001,
        );
      }
      else {
        $crf_requests = $form_state['values']['field_collection_request']['und'];
        $crf_requests['#max_delta'] = $max_delta;

        $preview_request_table = theme('field_collection_request_preview', $crf_requests);

        $form['field_collection_request']['preview_requests'] = array(
          '#markup' => $preview_request_table,
        );
        $form['field_collection_request']['und']['#access'] = FALSE;
        $form['field_collection_request']['cancel_preview'] = array(
          '#name' => 'crf_request_cancel_preview_button',
          '#type' => 'submit',
          '#value' => t('Cancel preview requests'),
          '#validate' => array(),
          '#submit' => array('crf_request_field_collection_request_cancel_preview_submit'),
          '#weight' => 1001,
        );
      }
    }
  }

  // Cleanup field_collection subform
  if (isset($form['field_collection_request'])) {
    $max_delta = $form['field_collection_request']['und']['#max_delta'];
    if (isset($form['field_collection_request']['und'][$max_delta]['remove_button'])) {
      $form['field_collection_request']['und'][$max_delta]['remove_button']['#value'] = t('Clear');
    }
    $form['field_collection_request']['und']['add_more']['#value'] = t('Add another report');
    // remove report entity reference form element
    for ($i = 0; $i <= $max_delta; $i++) {
      unset($form['field_collection_request']['und'][$i]['field_report']);
    }
  }
//dpm(array('form' => $form, 'form_state' => $form_state), 'crf_request_form_request_node_form_alter - FINAL');
}

/**
 * Validate callback to preview a field_collection_request
 * @TODO use field_collection_field_widget_form #element_validate (field_collection_field_widget_embed_validate)
 */
function crf_request_field_collection_request_preview_validate($form, &$form_state) {

  $max_delta = $form['field_collection_request']['und']['#max_delta'];
  for ($i=0; $i<=$max_delta; $i++) {
    // Check reporting type
    if (empty($form_state['values']['field_collection_request']['und'][$i]['field_reporting_type']['und'][0]['target_id'])) {
      form_set_error('field_collection_request][und][' . $i . '][field_reporting_type', t('Please select a Report type'));
    }
    // Check recipients
    $recipient_delta = count($form_state['values']['field_collection_request']['und'][$i]['field_request_recipients']['und']);
    if ( ($recipient_delta < 2) && empty($form_state['values']['field_collection_request']['und'][$i]['field_request_recipients']['und'][0]['target_id']) ) {
      form_set_error('field_collection_request][und][' . $i . '][field_request_recipients', t('Please select a Recipient'));
    }
    // Check Referral
    if (empty($form_state['values']['field_collection_request']['und'][$i]['field_request_requested_by']['und'][0]['target_id'])) {
      form_set_error('field_collection_request][und][' . $i . '][field_request_requested_by', t('Please select a Referral'));
    }
  }
//dpm($form, 'crf_request_field_collection_request_preview_validate > form');
}

/**
 * Submit callback to preview a field_collection_request
 */
function crf_request_field_collection_request_preview_submit($form, &$form_state) {
  $button = $form_state['triggering_element'];
//dpm(array('form' => $form, 'form_state' => $form_state, 'button' => $button), 'crf_request_field_collection_request_preview_submit');
  $form_state['storage']['crf_request_preview'] = TRUE;
  $form_state['rebuild'] = TRUE;
}

function crf_request_field_collection_request_cancel_preview_submit($form, &$form_state) {
  $form_state['storage']['crf_request_preview'] = FALSE;
  $form_state['rebuild'] = TRUE;
}
/*
function crf_request_form_alter(&$form, &$form_state, $form_id) {
dsm("crf_request_form_alter > $form_id");
}
*/

/**
 * Implements hook_theme().
 */
function crf_request_theme() {
  return array(
    'field_collection_request_preview' => array(
//      'variables' => array('element' => NULL),
      'function' => 'theme_field_collection_request_preview',
    ),
  );
}

/**
 * Auxiliary function to get email message from
 * rules_email_recipients_on_request_submission
 */
function _crf_request_get_email_request_submission() {

  // get rule to preview email
  $rule_config = rules_config_load('rules_email_recipients_on_request_submission');
  $rule_components = json_decode($rule_config->export(), TRUE);
  $rule_mail = '';
  array_walk_recursive($rule_components, function ($item, $key) use (&$rule_mail) {
    if (!is_null($key) && ($key==='message')) {
      $rule_mail = $item;
    }
  });

  return $rule_mail;
}

/**
 * Theme field_collection request for preview
 * @TODO cleanup mail template
 */
function theme_field_collection_request_preview($element) {
  global $base_url;

  $header = array(t('Report type'), t('Recipient'), t('Requested by'), t('Email'));
  $rows = array();

  for ($delta=0; $delta<=$element['#max_delta']; $delta++) {

    // get report type
    $reporting_type_tid = $element[$delta]['field_reporting_type']['und'][0]['target_id'];
    if ($reporting_type_tid) {
      $reporting_type_term = taxonomy_term_load($reporting_type_tid);
      $reporting_type = $reporting_type_term->name;
    }
    else {
      $reporting_type = 'n/a';
    }
    // get requested by
    $requested_by_uid = $element[$delta]['field_request_requested_by']['und'][0]['target_id'];
    if ($requested_by_uid) {
      $requested_by = user_load($requested_by_uid);
      $requested_by_wrapper = entity_metadata_wrapper('user', $requested_by);
      $requested_by_first_name = $requested_by_wrapper->field_first_name->value();
      $requested_by_last_name = $requested_by_wrapper->field_last_name->value();
    }
    else {
      $requested_by_first_name = 'n/a';
      $requested_by_last_name = 'n/a';
    }

    // get recipient
    foreach ($element[$delta]['field_request_recipients']['und'] as $recipient) {
      $recipient_uid = $recipient['target_id'];
      if ($recipient_uid) {
        $recipient = user_load($recipient_uid);
        $recipient_wrapper = entity_metadata_wrapper('user', $recipient);
        $recipient_first_name = $recipient_wrapper->field_first_name->value();
        $recipient_last_name = $recipient_wrapper->field_last_name->value();
      }
      else {
        $recipient_first_name = 'n/a';
        $recipient_last_name = 'n/a';
      }

      // get recipient email body
      $append_to_alert = $element[$delta]['field_append_to_alert_email']['und'][0]['value'];
      $recipient_mail_template = _crf_request_get_email_request_submission();
      $replacements = array(
        '[request-item-recipient:field-first-name]' => $recipient_first_name,
        '[request-item-recipient:field-last-name]'  => $recipient_last_name,
        '[request-item:field-request-requested-by:field-first-name]' => $requested_by_first_name,
        '[request-item:field-request-requested-by:field-last-name]'  => $requested_by_last_name,
        '[request-item:field-reporting-type:name]' => $reporting_type,
        '[request-item:field-append-to-alert-email]' => $append_to_alert,
        '[node:url]' => $base_url,
      );
      $recipient_mail = strtr($recipient_mail_template, $replacements);

      $rows[] = array('data' => array($reporting_type, "$recipient_first_name $recipient_last_name", "$requested_by_first_name $requested_by_last_name", '<span class="link-preview">preview</span>'));
      $rows[] = array(
        'data' => array(array('data' => '<pre style="font-family:Courier, monospace">' . $recipient_mail . '</pre>', 'colspan' => 4)),
        'class' => array('mail-preview'),
        'no_striping' => TRUE
      );
    }
  }
  drupal_add_js(drupal_get_path('module', 'crf_request') . '/crf_request.email_preview.js');
  return theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => 'report-request-preview')));
}

